{"version":3,"sources":["reportWebVitals.js","components/auth/authSettings.js","components/auth/Login.js","components/auth/Register.js","components/nav/NavBar.js","components/grid/GridProvider.js","components/sketch/SketchProvider.js","components/sketch/SketchPad.js","components/sketch/Sketch.js","components/sketchbook/SketchCard.js","components/sketchbook/SketchBook.js","components/sketch/SketchForm.js","components/ApplicationViews.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","authApi","userStorageKey","Login","useState","email","loginUser","setLoginUser","existDialog","setExistDialog","history","useHistory","className","open","onClick","e","onSubmit","preventDefault","fetch","res","json","user","length","exists","sessionStorage","setItem","id","push","htmlFor","type","placeholder","required","autoFocus","value","onChange","event","newUser","target","Button","to","Register","firstName","lastName","registerUser","setRegisterUser","conflictDialog","setConflictDialog","handleInputChange","style","textAlign","userExists","method","headers","body","JSON","stringify","name","createdUser","hasOwnProperty","NavBar","props","clear","GridContext","createContext","GridProvider","grids","setGrids","gridInput","setGridInput","color","setColor","Provider","getGrids","saveGrid","obj","deleteGrid","children","SketchContext","SketchProvider","useContext","sketches","setSketches","timer","ms","Promise","setTimeout","getSketches","saveSketch","savedSketch","userId","size","sketch","grid","reduce","chain","block","a","sketchId","blockId","blockColor","resolve","updateSketch","erasedBlocks","updatedSketch","getSketchById","deleteSketch","SketchPad","parseInt","app_user_id","useParams","isLoading","setIsLoading","percentage","setPercentage","showLoading","setShowLoading","showAlert","setShowAlert","mode","setMode","savedGrid","setSavedGrid","setErasedBlocks","showColorPicker","setShowColorPicker","setSketch","gridStyle","gridTemplateColumns","gridTemplateRows","height","width","load","i","handleSketchMode","includes","handleDragStart","dataTransfer","setDragImage","Image","handleGridDrag","chosenItem","split","currentGridBlock","find","savedGridBlock","foundErasedBlock","backgroundColor","undefined","newSketch","filter","newGrid","useEffect","editSketch","autoComplete","defaultValue","Modal","show","onHide","animation","centered","Header","closeButton","initialGrid","foundBlock","draggable","onDragStart","onDragOver","createGrid","disabled","matchingBlocks","map","colors","onChangeComplete","hex","triangle","Body","ProgressBar","animated","now","label","Math","round","Sketch","SketchCard","Card","Title","SketchBook","SketchForm","InputGroup","Prepend","Text","FormControl","aria-label","aria-describedby","Append","Alert","variant","onClose","transition","dismissible","ApplicationViews","exact","path","App","render","getItem","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7069c8a4.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// If your json-server API URL or endpoint is different, please change it below!\nexport const authApi = {\n  localApiBaseUrl: \"http://localhost:8088\",\n  endpoint: \"users\"\n}\n\n// The user id is saved under the key app_user_id in session Storage. Change below if needed!\nexport const userStorageKey = \"app_user_id\"\n\n","import React, { useState } from \"react\"\nimport { Link, useHistory } from \"react-router-dom\";\nimport { authApi, userStorageKey } from \"./authSettings\"\nimport \"./Login.css\"\nimport Button from \"react-bootstrap/Button\"\n\nexport const Login = () => {\n    const [loginUser, setLoginUser] = useState({ email: \"\" })\n    const [existDialog, setExistDialog] = useState(false)\n\n    const history = useHistory()\n\n    const handleInputChange = (event) => {\n        const newUser = { ...loginUser }\n        newUser[event.target.id] = event.target.value\n        setLoginUser(newUser)\n    }\n\n\n    const existingUserCheck = () => {\n        return fetch(`${authApi.localApiBaseUrl}/${authApi.endpoint}?email=${loginUser.email}`)\n            .then(res => res.json())\n            .then(user => user.length ? user[0] : false)\n    }\n\n    const handleLogin = (e) => {\n        e.preventDefault()\n\n        existingUserCheck()\n            .then(exists => {\n                if (exists) {\n                    sessionStorage.setItem(userStorageKey, exists.id)\n                    history.push(\"/\")\n                } else {\n                    setExistDialog(true)\n                }\n            })\n    }\n\n    return (\n        <main className=\"container--login\">\n            <dialog className=\"dialog dialog--auth\" open={existDialog}>\n                <div>User does not exist</div>\n                <button className=\"button--close\" onClick={e => setExistDialog(false)}>Close</button>\n            </dialog>\n            <section>\n                <form className=\"form--login\" onSubmit={handleLogin}>\n                    <h1>Sketchbook</h1>\n                    <h2>Please sign in</h2>\n                    <fieldset>\n                        <label htmlFor=\"inputEmail\"> Email address </label>\n                        <input type=\"email\"\n                            id=\"email\"\n                            className=\"form-control\"\n                            placeholder=\"Email address\"\n                            required autoFocus\n                            value={loginUser.email}\n                            onChange={handleInputChange} />\n                    </fieldset>\n                    <fieldset>\n                        <Button type=\"submit\">\n                            Sign in\n                        </Button>\n                    </fieldset>\n                </form>\n            </section>\n            <section className=\"link--register\">\n                <Link to=\"/register\">Register for an account</Link>\n            </section>\n        </main>\n    )\n}\n\n","import React, { useState } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { authApi, userStorageKey } from \"./authSettings\"\nimport \"./Login.css\"\n\nexport const Register = () => {\n\n    const [registerUser, setRegisterUser] = useState({ firstName: \"\", lastName: \"\", email: \"\" })\n    const [conflictDialog, setConflictDialog] = useState(false)\n\n    const history = useHistory()\n\n    const handleInputChange = (event) => {\n        const newUser = { ...registerUser }\n        newUser[event.target.id] = event.target.value\n        setRegisterUser(newUser)\n    }\n\n    const existingUserCheck = () => {\n        \n        return fetch(`${authApi.localApiBaseUrl}/${authApi.endpoint}?email=${registerUser.email}`)\n            .then(res => res.json())\n            .then(user => !!user.length)\n    }\n\n    const handleRegister = (e) => {\n        e.preventDefault()\n\n        existingUserCheck()\n            .then((userExists) => {\n                if (!userExists) {\n                    fetch(`${authApi.localApiBaseUrl}/${authApi.endpoint}`, {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            email: registerUser.email,\n                            name: `${registerUser.firstName} ${registerUser.lastName}`\n                        })\n                    })\n                        .then(res => res.json())\n                        .then(createdUser => {\n                            if (createdUser.hasOwnProperty(\"id\")) {\n                                sessionStorage.setItem(userStorageKey, createdUser.id)\n                                history.push(\"/\")\n                            }\n                        })\n                }\n                else {\n                    setConflictDialog(true)\n                }\n            })\n\n    }\n\n    return (\n        <main style={{ textAlign: \"center\" }}>\n\n            <dialog className=\"dialog dialog--password\" open={conflictDialog}>\n                <div>Account with that email address already exists</div>\n                <button className=\"button--close\" onClick={e => setConflictDialog(false)}>Close</button>\n            </dialog>\n\n            <form className=\"form--login\" onSubmit={handleRegister}>\n                <h1 className=\"h3 mb-3 font-weight-normal\">Please Register for Application Name</h1>\n                <fieldset>\n                    <label htmlFor=\"firstName\"> First Name </label>\n                    <input type=\"text\" name=\"firstName\" id=\"firstName\" className=\"form-control\" placeholder=\"First name\" required autoFocus value={registerUser.firstName} onChange={handleInputChange} />\n                </fieldset>\n                <fieldset>\n                    <label htmlFor=\"lastName\"> Last Name </label>\n                    <input type=\"text\" name=\"lastName\" id=\"lastName\" className=\"form-control\" placeholder=\"Last name\" required value={registerUser.lastName} onChange={handleInputChange} />\n                </fieldset>\n                <fieldset>\n                    <label htmlFor=\"inputEmail\"> Email address </label>\n                    <input type=\"email\" name=\"email\" id=\"email\" className=\"form-control\" placeholder=\"Email address\" required value={registerUser.email} onChange={handleInputChange} />\n                </fieldset>\n                <fieldset>\n                    <button type=\"submit\"> Sign in </button>\n                </fieldset>\n            </form>\n        </main>\n    )\n}\n\n","import React from \"react\"\nimport { Link } from \"react-router-dom\"\nimport \"./NavBar.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nexport const NavBar = (props) => {\n  return (\n    <nav className=\"navbar flex-md-nowrap p-0 shadow\">\n      <ul className=\"nav\">\n        <li className=\"nav-item\">\n          <Link className=\"nav-link\" to=\"/sketchform\">SketchPad</Link>\n        </li>\n        <li className=\"nav-item\">\n          <Link className=\"nav-link\" to=\"/sketchbook\">SketchBook</Link>\n        </li>\n      </ul>\n      <ul className=\"nav nav-logout\">\n        <li className=\"nav-item\">\n          <Link className=\"nav-link\" onClick={e => sessionStorage.clear()} to=\"/login\">Logout</Link>\n        </li>\n      </ul>\n    </nav>\n  )\n}","import React, { createContext, useState } from \"react\"\n\nexport const GridContext = createContext()\n\nexport const GridProvider = (props) => {\n  const [grids, setGrids] = useState([])\n  const [gridInput, setGridInput] = useState(0)\n  const [color, setColor] = useState(\"#000000\")\n\n  const getGrids = () => {\n    return fetch(\"http://localhost:8088/grids\")\n    .then(res => res.json())\n    .then(setGrids)\n  }\n\n  const saveGrid = (obj) => {\n    return fetch(\"http://localhost:8088/grids\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(obj)\n    })\n  }\n\n  const deleteGrid = (id) => {\n    return fetch(`http://localhost:8088/grids/${id}`, {\n      method: \"DELETE\",\n    })\n  }\n\n  return (\n    <GridContext.Provider value={{\n      grids, getGrids, saveGrid, gridInput, setGridInput, deleteGrid, color, setColor\n    }}>\n      {props.children}\n    </GridContext.Provider>\n  )\n}","import React, { createContext, useContext, useState } from \"react\"\nimport { GridContext } from \"../grid/GridProvider\"\n\nexport const SketchContext = createContext()\n\nexport const SketchProvider = (props) => {\n  const {saveGrid, deleteGrid} = useContext(GridContext)\n  const [sketches, setSketches] = useState([])\n\n  //timer to use with await in saveSketch\n  //sets timeout to slow down promise execution\n  const timer = ms => new Promise(res => setTimeout(res, ms))\n\n  const getSketches = () => {\n    return fetch(\"http://localhost:8088/sketches?_embed=grids\")\n    .then(res => res.json())\n    .then(setSketches)\n  }\n\n  const saveSketch = (obj) => {\n    const savedSketch = {\n      name: obj.name,\n      userId: obj.userId,\n      size: obj.size\n    }\n    return fetch(\"http://localhost:8088/sketches\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(savedSketch)\n    })\n    .then(res => res.json())\n    .then(sketch => {\n      //use reduce instead of map because the accumulator depends on the response of the previous return\n      //promises have time to fulfill before moving on to the next\n      //sometimes, promises still gave error, so timer was added to ensure ample time given\n      obj.grid.reduce(\n        (chain, block) => chain\n        .then(async () => {\n          saveGrid({\n            sketchId: sketch.id,\n            blockId: block.blockId,\n            blockColor: block.blockColor\n          })\n          //halts execution of async function until timeout completes\n          await timer(100)\n          //Promise.resolve() is the initial value of the accumulator that returns a fulfilled Promise\n          //this return value lets you use .then and starts the chain\n          //.then returns the fulfilled saveGrid promise to \"chain\" (accumulator) and continues the iteration\n        }), Promise.resolve()\n      )\n    })\n  }\n\n  const updateSketch = (obj) => {\n    obj.erasedBlocks.reduce(\n      (chain, block) =>\n        chain.then(async () => {\n          deleteGrid(block)\n          await timer(100)\n        }),\n        Promise.resolve()\n    )\n    const updatedSketch = {\n      id: obj.id,\n      name: obj.name,\n      userId: obj.userId,\n      size: obj.size\n    }\n    return fetch(`http://localhost:8088/sketches/${obj.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedSketch)\n    })\n    .then(res => res.json())\n    .then(async () => {\n      await timer(obj.erasedBlocks.length * 100)\n      //same method as in saveSketch\n      obj.grid.reduce(\n        (chain, block) => \n          chain.then(async () => {\n          saveGrid({\n            sketchId: obj.id,\n            blockId: block.blockId,\n            blockColor: block.blockColor\n          })\n          await timer(100)\n        }),\n          Promise.resolve()\n      )\n    })\n  }\n\n  const deleteSketch = (id) => {\n    return fetch(`http://localhost:8088/sketches/${id}`, {\n      method: \"DELETE\"\n    })\n    .then(getSketches)\n  }\n\n  const getSketchById = (id) => {\n    return fetch(`http://localhost:8088/sketches/${id}?_embed=grids`)\n    .then(res => res.json())\n  }\n\n  return (\n    <SketchContext.Provider value={{\n      sketches, getSketches, saveSketch, updateSketch, getSketchById, deleteSketch\n    }}>\n      {props.children}\n    </SketchContext.Provider>\n  )\n}","import React, { useContext, useEffect, useState } from \"react\"\nimport { useHistory, useParams } from \"react-router-dom\"\nimport \"./SketchPad.css\"\nimport { SketchContext } from \"./SketchProvider\"\nimport Button from \"react-bootstrap/Button\"\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport Modal from \"react-bootstrap/Modal\"\nimport { GridContext } from \"../grid/GridProvider\"\nimport { GithubPicker } from \"react-color\"\n\nexport const SketchPad = (props) => {\n  const { saveSketch, getSketchById, updateSketch } = useContext(SketchContext)\n  const { getGrids, color, setColor } = useContext(GridContext)\n\n  const userId = parseInt(sessionStorage.app_user_id)\n  const { sketchId } = useParams()\n  const history = useHistory()\n\n  const [isLoading, setIsLoading] = useState(true)\n  const [percentage, setPercentage] = useState(0)\n  const [showLoading, setShowLoading] = useState(false)\n  const [showAlert, setShowAlert] = useState(false)\n  //when mode === true, user draws\n  //when mode === false, user erases\n  const [mode, setMode] = useState(true)\n  const [savedGrid, setSavedGrid] = useState([])\n  const [erasedBlocks, setErasedBlocks] = useState([])\n  const [showColorPicker, setShowColorPicker] = useState(false)\n\n  const [sketch, setSketch] = useState({\n    name: \"\",\n    size: parseInt(props.size),\n    userId: userId,\n    grid: []\n  })\n\n  //styling for grid container\n  const gridStyle = {\n    gridTemplateColumns: `repeat(${sketch.size}, 1fr)`,\n    gridTemplateRows: `repeat(${sketch.size}, 1fr)`,\n    height: \"75vh\",\n    width: \"75vh\",\n  }\n\n  //returns a Promise that resolves after \"ms\" Milliseconds\n  //sets timeout to slow down promise execution to match how fast objects are being saved in provider\n  const timer = ms => new Promise(res => setTimeout(res, ms))\n\n  //function to stop the page from redirecting before the sketch is finished saving\n  const load = async () => {\n    if (sketch.grid.length !== 0 || erasedBlocks.length !== 0){\n      //makes the modal visible and show the progress bar\n      setShowLoading(true)\n      //for loop that is the length of the amount of blocks being saved\n      for (var i = 0; i <= (sketch.grid.length + erasedBlocks.length); i++) {\n        //updates the state variable percentage to match the progress of blocks being saved since the timing is constant\n        setPercentage((100/(sketch.grid.length + erasedBlocks.length)) * i)\n        //halts execution of async function until timeout completes\n        await timer(100);\n      }\n    }\n    //after the loop completes, the user is taken to sketchbook\n    history.push(\"/sketchbook\")\n  }\n\n  const handleSketchMode = (event) => {\n    if (!event.target.className.includes(\"selected\")){\n      if (mode === true){\n        setMode(false)\n      } else {\n        setMode(true)\n      }\n    }\n  }\n\n  const handleColorButton = (event) => {\n    setShowColorPicker(!showColorPicker)\n  }\n\n  const handleColorChange = (color, event) => {\n    setColor(color.hex)\n    setShowColorPicker(!showColorPicker)\n    setMode(true)\n  }\n\n  //function to get rid of ghost image when dragging a block\n  const handleDragStart = (event) => {\n    //creates a new, blank image for the item being dragged\n    event.dataTransfer.setDragImage(new Image(), 0, 0)\n  }\n\n  //function to change the color of the block that is dragged over\n  const handleGridDrag = (event) => {\n    const chosenItem = event.target\n    const [prefix, id] = chosenItem.id.split(\"--\")\n    const currentGridBlock = sketch.grid.find(block => block.blockId === parseInt(id))\n    const savedGridBlock = savedGrid.find(block => block.blockId === parseInt(id))\n    const foundErasedBlock = erasedBlocks.find(block => block.blockId === parseInt(id))\n    \n    if (mode === true){\n      //changes the background color by changing the style of the block\n      chosenItem.style.backgroundColor = color\n      \n      if (currentGridBlock === undefined) {\n        sketch.grid.push({\n            \"blockId\": parseInt(id),\n            \"blockColor\": color\n          })\n      } else if (currentGridBlock !== undefined) {\n        let newSketch = {...sketch}\n        newSketch.grid = newSketch.grid.filter(block => block.blockId !== parseInt(id))\n        newSketch.grid.push({\n          \"blockId\": parseInt(id),\n          \"blockColor\": color\n        })\n        setSketch(newSketch)\n      }\n\n      if (savedGridBlock !== undefined) {\n        if (savedGridBlock.blockColor === color){\n          let newSketch = {...sketch}\n          newSketch.grid = newSketch.grid.filter(block => block.blockId !== parseInt(id))\n          setSketch(newSketch)\n        } else if (foundErasedBlock === undefined){\n          erasedBlocks.push({\n            \"blockId\": parseInt(id),\n            \"blockColor\": savedGridBlock.blockColor,\n            \"id\": savedGridBlock.id\n          })\n        }\n      }\n\n      if (foundErasedBlock !== undefined && foundErasedBlock.blockColor === color){\n        setErasedBlocks([...erasedBlocks].filter(block => block.blockId !== parseInt(id)))\n      }\n    } else if (mode === false){\n      chosenItem.style.backgroundColor = \"#ffffff\"\n\n      if (foundErasedBlock === undefined && savedGridBlock !== undefined){\n        erasedBlocks.push({\n          \"blockId\": parseInt(id),\n          \"blockColor\": savedGridBlock.blockColor,\n          \"id\": savedGridBlock.id\n        })\n      }\n\n      if (currentGridBlock !== undefined) {\n        let newSketch = {...sketch}\n        const newGrid = sketch.grid.filter(block => block.blockId !== parseInt(id))\n        newSketch.grid = newGrid\n        setSketch(newSketch)\n      }\n    }\n  }\n\n  //function to save the current grid when save button is clicked\n  const handleSaveGrid = (event) => {\n    //watches to see if the name input is empty\n    if (sketch.name === \"\") {\n      setShowAlert(true)\n    } else {\n      setIsLoading(true)\n      //check to see if there is a sketchId to determine if editing or saving new sketch\n      if (sketchId) {\n        let matchingBlocks = erasedBlocks.map(block => {\n          return block.id\n          // let foundBlock = grids.find(gridItem => gridItem.blockId === block && gridItem.sketchId === sketch.id)\n          // return foundBlock.id\n        })\n        //save the updated name and new blocks that were colored\n        updateSketch({\n          id: sketch.id,\n          name: sketch.name,\n          size: sketch.size,\n          userId: sketch.userId,\n          grid: sketch.grid,\n          erasedBlocks: matchingBlocks\n        })\n        .then(load())\n      } else {\n        const newSketch = {\n          name: sketch.name,\n          size: sketch.size,\n          userId: userId,\n          grid: sketch.grid\n        }\n\n        saveSketch(newSketch)\n        .then(load())\n      }\n    }\n  }\n  \n  const handleNewSketch = (event) => {\n    history.push(\"/sketchform\")\n  }\n\n  //function to generate the initial grid\n  const createGrid = (size) => {\n    let initialGrid = []\n    \n    //for loop to repeatedly create blocks to cover the area of the grid container\n    for (let i = 1; i <= size * size; i++) {\n      //if the grid was loaded for editing, savedGrid will contain the id's of colored grids\n      //creates a colored block if the grid id is included in the savedGrid array\n      if (savedGrid.find(block => block.blockId === i) !== undefined) {\n        const foundBlock = savedGrid.find(block => block.blockId === i)\n        initialGrid.push(<div className=\"grid\" style={{backgroundColor: foundBlock.blockColor}} key={i} id={`grid--${i}`} draggable=\"true\" onDragStart={handleDragStart} onDragOver={handleGridDrag}></div>)\n      } else {\n        initialGrid.push(<div className=\"grid\" key={i} id={`grid--${i}`} draggable=\"true\" onDragStart={handleDragStart} onDragOver={handleGridDrag}></div>)\n      }\n    }\n    return initialGrid\n  }\n\n  useEffect(() => {\n    setIsLoading(true)\n    getGrids()\n    .then(() => {\n      //check to see if there is a sketchId to determine if editing or saving new sketch\n      if (sketchId) {\n        getSketchById(sketchId)\n          .then(sketch => {\n            let editSketch = {\n              id: sketch.id,\n              name: sketch.name,\n              size: sketch.size,\n              userId: sketch.userId,\n              grid: []\n            }\n            //takes the associated blocks from grids resource and puts it into an array, which is set to the state variable savedGrid\n            // let matchingGrid = sketch.grids.map(grid => grid.blockId)\n            setSavedGrid(sketch.grids)\n            //sets state variable sketch to contain the information of the sketch that the user wants to edit\n            setSketch(editSketch)\n            setIsLoading(false)\n          })\n      } else {\n        setIsLoading(false)\n      }\n    })\n  }, [])\n\n  return (\n    <>\n      <div className=\"sketchpadContainer\">\n        <input type=\"text\" id=\"name\" className=\"sketch__input\" autoComplete=\"off\" defaultValue={sketch.name} placeholder={sketchId ? sketch.name : \"New Sketch Name\"} onChange={(event) => sketch.name = event.target.value} />\n        <Modal show={showAlert} size=\"lg\" onHide={() => setShowAlert(false)} animation={false} centered>\n          <Modal.Header closeButton>\n            Name your sketch before saving!\n          </Modal.Header>\n        </Modal>\n        <div className=\"container\" style={gridStyle}>\n          {createGrid(sketch.size)}\n        </div>\n        <Button className=\"grid__newSketch\" onClick={handleNewSketch}>New Sketch</Button>\n        <Button className=\"grid__save\" disabled={isLoading} onClick={handleSaveGrid}>Save Sketch</Button>\n        <div>\n          <div className=\"btn__settings\">\n            <div className=\"settings__pencil\">\n              <Button className={mode ? \"grid__mode selected\" : \"grid__mode\"} onClick={handleSketchMode}>Pencil</Button>\n            </div>\n            <div className=\"settings__eraser\">\n              <Button className={mode ? \"grid__mode\" : \"grid__mode selected\"} onClick={handleSketchMode}>Eraser</Button>\n            </div>\n            <div className=\"settings__color\">\n              <Button className=\"grid__color\" onClick={handleColorButton} >Color</Button>\n              {showColorPicker ? <GithubPicker \n              colors={[\"#000000\", \"#B80000\", '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#004DCF', '#5300EB', '#EB9694', '#FAD0C3', '#FEF3BD', '#C1E1C5', '#BEDADC', '#C4DEF6', '#BED3F3', '#D4C4FB', \"#964B00\"]}\n              onChangeComplete={handleColorChange}\n              triangle=\"hide\"\n              /> : null}\n            </div>\n          </div>\n        </div>\n      </div>\n      <Modal animation={false} show={showLoading} size=\"lg\" centered >\n        <Modal.Body><ProgressBar animated now={percentage} label={`Saving: ${Math.round(percentage)}%`} ></ProgressBar></Modal.Body>\n      </Modal>\n    </>\n  )\n}\n","import React, { useContext } from \"react\"\nimport { GridContext } from \"../grid/GridProvider\"\nimport { SketchPad } from \"./SketchPad\"\n\nexport const Sketch = () => {\n  const {gridInput} = useContext(GridContext)\n\n  //when user clicks button on form, the number in the state variable determines the size of the grid\n  return (\n    <div className=\"sketch\">\n      <SketchPad size={gridInput} />\n    </div>\n  )\n}","import React, { useContext, useState } from \"react\"\nimport Card from \"react-bootstrap/Card\"\nimport Button from \"react-bootstrap/Button\"\nimport { useHistory } from \"react-router-dom\"\nimport {SketchContext} from \"../sketch/SketchProvider\"\n\nexport const SketchCard = (props) => {\n  const {deleteSketch} = useContext(SketchContext)\n\n  const history = useHistory()\n\n  const gridStyle = {\n    gridTemplateColumns: `repeat(${props.sketch.size}, 1fr)`,\n    gridTemplateRows: `repeat(${props.sketch.size}, 1fr)`,\n    height: \"20vh\",\n    width: \"20vh\",\n  }\n\n  const handleDeleteSketch = (event) => {\n    const [prefix, id] = event.target.id.split(\"--\")\n\n    //deletes the sketch from json as well as objects in the grids resource with the matching sketchId\n    deleteSketch(parseInt(id))\n  }\n\n  const createGrid = (size) => {\n    let initialGrid = []\n    let savedGrid = props.sketch.grids\n    \n    //for loop to repeatedly create blocks to cover the area of the grid container\n    for (let i = 1; i <= size * size; i++) {\n      //if the grid was loaded for editing, savedGrid will contain the id's of colored grids\n      //creates a colored block if the grid id is included in the savedGrid array\n      if (savedGrid.find(block => block.blockId === i) !== undefined) {\n        const foundBlock = savedGrid.find(block => block.blockId === i)\n        initialGrid.push(<div className=\"grid\" style={{backgroundColor: foundBlock.blockColor}} key={i} id={`grid--${i}`}></div>)\n      } else {\n        initialGrid.push(<div className=\"grid\" key={i} id={`grid--${i}`}></div>)\n      }\n    }\n    return initialGrid\n  }\n\n  return (\n    <section className=\"sketchCard\">\n      <Card className=\"sketchCard__card\">\n        <Card.Body>\n          <Card.Title>{props.sketch.name}</Card.Title>\n          <div className=\"previewContainer\" style={gridStyle}>\n            {createGrid(props.sketch.size)}\n          </div>\n          <Button className=\"btn-edit\" onClick={() => {history.push(`/sketch/edit/${props.sketch.id}`)}}>Edit Sketch</Button>\n          <Button className=\"btn-delete\" id={`btn--${props.sketch.id}`} onClick={handleDeleteSketch}>Delete Sketch</Button>\n        </Card.Body>\n      </Card>\n    </section>\n  )\n}","import React, { useContext, useEffect } from \"react\"\nimport { SketchContext } from \"../sketch/SketchProvider\"\nimport { SketchCard } from \"./SketchCard\"\nimport \"./SketchBook.css\"\n\nexport const SketchBook = () => {\n  const {sketches, getSketches} = useContext(SketchContext)\n\n  const userId = parseInt(sessionStorage.app_user_id)\n\n  useEffect(() => {\n    getSketches()\n  }, [])\n\n  return (\n    <div className=\"sketches\">\n     {\n       //filters sketches for ones that have the current user's id\n       sketches.filter(sketch => sketch.userId === userId)\n       //then maps that array to render each sketch's information\n       .map(sketch => {\n         return <SketchCard key={sketch.id} sketch={sketch} />\n       })\n     }\n    </div>\n  )\n}","import React, { useContext, useState } from \"react\"\nimport InputGroup from \"react-bootstrap/InputGroup\"\nimport FormControl from \"react-bootstrap/FormControl\"\nimport Alert from \"react-bootstrap/Alert\"\nimport { useHistory } from \"react-router\"\nimport { GridContext } from \"../grid/GridProvider\"\nimport Button from \"react-bootstrap/Button\"\nimport \"./SketchForm.css\"\n\nexport const SketchForm = () => {\n  const [showAlert, setShowAlert] = useState(false)\n  const {gridInput, setGridInput} = useContext(GridContext)\n\n  const history = useHistory()\n\n  //function for button click\n  const handleCreateGrid = (event) => {\n    //redirects user to sketch page and renders sketchpad based on size in input\n    if (parseInt(gridInput) <= 10 && parseInt(gridInput) > 0) {\n      history.push(\"/sketchpad\")\n    //shows alert\n    } else {\n      setShowAlert(true)\n    }\n  }\n\n  //state variable in GridProvider changes when input value changes\n  const handleInputChange = (event) => {\n    setGridInput(event.target.value)\n  }\n\n  return (\n    <>\n    <div className=\"formContainer\">\n      <div className=\"logo\">SketchBook</div>\n      <div className=\"row\">\n        <div className=\"text-center col-sm-6 offset-sm-3\">\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text className=\"form_label\">SketchPad Size: </InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl type=\"number\" className=\"form_input\" aria-label=\"Grid Size\" aria-describedby=\"basic-addon1\" placeholder=\"Number between 1-10\" onChange={handleInputChange} autoFocus />\n            <InputGroup.Append>\n              <Button className=\"form_btn\" onClick={handleCreateGrid}>Start Sketch</Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </div>\n      </div>\n      <Alert variant=\"danger\" className=\"col-sm-4 offset-sm-4\" show={showAlert} onClose={() => setShowAlert(false)} transition={false} dismissible>\n        That's not a usable number!\n      </Alert>\n    </div>\n    </>\n  )\n}","import React from \"react\"\nimport { Route } from \"react-router-dom\"\nimport { GridProvider } from \"./grid/GridProvider\"\nimport { Sketch } from \"./sketch/Sketch\"\nimport { SketchProvider } from \"./sketch/SketchProvider\"\nimport { SketchBook } from \"./sketchbook/SketchBook\"\nimport { SketchForm } from \"./sketch/SketchForm\"\n\nexport const ApplicationViews = () => {\n  return (\n    <GridProvider>\n    <SketchProvider>\n      <Route exact path=\"/sketchpad\">\n        <Sketch />\n      </Route>\n\n      <Route exact path=\"/sketchform\">\n        <SketchForm />\n      </Route>\n\n      <Route exact path=\"/sketchbook\">\n        <SketchBook />\n      </Route>\n\n      <Route exact path=\"/sketch/edit/:sketchId(\\d+)\">\n        <Sketch />\n      </Route>\n    </SketchProvider>\n    </GridProvider>\n  )\n}","import { Route, Redirect } from \"react-router-dom\"\nimport { Login } from \"./components/auth/Login\"\nimport { Register } from \"./components/auth/Register\"\nimport { userStorageKey } from \"./components/auth/authSettings\"\nimport { NavBar } from \"./components/nav/NavBar\"\nimport { ApplicationViews } from \"./components/ApplicationViews\"\nimport \"./App.css\"\n\nfunction App() {\n  return (\n    <>\n    <Route render={() => {\n      if (sessionStorage.getItem(userStorageKey)) {\n        return (\n          <>\n            <NavBar />\n            <ApplicationViews />\n            <Redirect to=\"/sketchform\" />\n          </>\n        )\n      } else {\n        return <Redirect to=\"/login\" />;\n      }\n  }} />\n\n  <Route path=\"/login\">\n    <Login />\n  </Route>\n  <Route path=\"/register\">\n    <Register />\n  </Route>\n  </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}